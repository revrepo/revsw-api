
# RevAPM API

The first version of the RevAPM API makes it easier for developers to have
open access to the RevAPM platform.  We created it to allow the developer
to extenct the Application into the RevAPM platform.
objects.

Build something great!


All requests are only accessible via https and the endpoint is located at
`api.revsw.net`. Depending on the request type a GET, POST, PUT or DELETE
is used. We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).
Every endpoint (URL) may support one of four different http verbs. GET
requests fetch information about an object, POST requests create objects,
PUT requests update objects, and finally DELETE requests will delete

## Authentication

RevAPM's supports authentication using a user's email and password
used to access. Rev system. Your API calls must include HTTP Basic
Authentication header (RFC 2617) generated from a user's email and password.
All modern browsers, as well as command line tools like curl and wget support
basic authentication. This is secure, since all communication with the Rev
service happens over SSL/HTTPS.

Example

```
curl -u "user@example.com:password"
```


## Limits
Be nice. If you're sending too many requests too quickly, we'll send back a
`503` error code (server unavailable).
There is a limit of 5000 requests per hour.


# Examples

## Account Control Example

This following section we are going to show some examples of how to create, 
modify and check status of a user.  

  
Create User Request URL:

```
https://api.revsw.net/v1/users
```

Create user JSON (User.json):
```json
{
 "email": "stan.lee@example.com",
 "firstname": "Stan",
 "lastname": "Lee",
 "password": "Spider-Man",
 "companyId": [
    "5588869fbde7a0d00338ce8f"
],
"theme": "light",
"role": "admin",
"domain": [
  "www.example.com",
  "api.example.com"
],
  "access_control_list": {
    "readOnly": false,
    "test": true,
    "configure": true,
    "reports": true,
    "dashBoard": true
  }
}
 
```
  
Example in CURL
```
ï¿¼curl -u 'user@example.com:password' -X POST -H 'Content-Type: application/json" -T User.json http://api.revsw.net/v1/users
```


Response Body should looks something like this following:

```json
 {
   "statusCode": 200,
   "message": "Successfully created new user",
   "object_id": "55bff4b8c01a42a2348170f7"
 }
```

This means that the user was created.   To check the stat of the user, use the object_id
and use the same endpoint with a GET request.

```
https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

```
curl -u 'user@example.com:password' -H 'Content-Type: application/json" http://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```
Response body to the get User request

```
{
    "email": "stan.lee2@example.com",
    "firstname": "Stan",
    "lastname": "Lee",
    "companyId": [
      "5588869fbde7a0d00338ce8f"
    ],
    "domain": [
     "www.example.com",
     "api.example.com"
    ],
    "updated_at": "2015-08-03T23:05:52.000Z",
    "created_at": "2015-08-03T23:05:52.000Z",
    "theme": "light",
    "role": "admin",
    "access_control_list": {
    "readOnly": false,
    "test": true,
    "configure": true,
    "reports": true,
    "dashBoard": true
  },
  "user_id": "55bff4b8c01a42a2348170f7"
}
```









