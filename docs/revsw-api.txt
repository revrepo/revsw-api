

# RevAPM API

Build something great!


All requests are only accessible via HTTPS and the endpoint is
located at `api.revsw.net`. RevAPM follows the CRUD approach and supports 
the request types GET, POST, PUT or DELETE. The GET requests will fetch 
information about an object, the POST requests will create an object, the 
PUT request will update an object, and finally the DELETE requests will delete the object.
We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).  


## Authentication 

The system supports authentication using the user’s email and password.  The 
same credentials used with the portal. The API calls must include HTTP Basic 
Authentication header (RFC 2617) generated from a user's email and password. 
All modern browsers, as well as command line tools like curl and wget support 
basic authentication. This is secure, since all communication with the RevAPM 
API service happens over SSL/HTTPS.


Example

```
curl -u 'user@example.com:password'
```


## Limits
Be nice. If you're sending too many requests too quickly, we'll send back a
`503` error code (server unavailable).
There is a limit of 5000 requests per hour. 


# Examples

## Account Control Example

### Create User
In the following section is an example of how to create, modify and check the status of a user. 

  
Create User Request URL:

```
https://api.revsw.net/v1/users
```

Create user JSON (User.json):
```json
{
  "email": "stan.lee@example.com",
  "firstname": "Stan",
  "lastname": "Lee",
  "password": "Spider-Man",
  "companyId": [
    "5588869fbde7a0d00338ce8f"
  ],
  "theme": "light",
  "role": "admin",
  "domain": [
    "www.example.com",
    "api.example.com"
  ],
  "access_control_list": {
  "readOnly": false,
  "test": true,
  "configure": true,
  "reports": true,
  "dashBoard": true
  }
}
 
```
  
cURL example:
```
curl -u 'user@example.com:password' -X POST -H 'Content-Type: application/json' -T User.json http://api.revsw.net/v1/users
```

Response body:

```json
 {
   "statusCode": 200,
   "message": "Successfully created new user",
   "object_id": "55bff4b8c01a42a2348170f7"
 }
```

This means that the user was successfully created.   

### Get User Profile

To get the profile of a user, use the object_id and the same endpoint with a GET request.

```
https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

cURL example:

```
curl -u 'user@example.com:password' -H 'Content-Type: application/json' http://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```
Response body to the get User request

```json
{
    "email": "stan.lee@example.com",
    "firstname": "Stan",
    "lastname": "Lee",
    "companyId": [
      "5588869fbde7a0d00338ce8f"
    ],
    "domain": [
     "www.example.com",
     "api.example.com"
    ],
    "updated_at": "2015-08-03T23:05:52.000Z",
    "created_at": "2015-08-03T23:05:52.000Z",
    "theme": "light",
    "role": "admin",
    "access_control_list": {
    "readOnly": false,
    "test": true,
    "configure": true,
    "reports": true,
    "dashBoard": true
  },
  "user_id": "55bff4b8c01a42a2348170f7"
}
```
### Change User

To change a user, use a PUT to the same endpoint. In the 
following example, we will be removing access to the "api.example.com" 
domain and changing the Portal theme to "dark".


```
https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```



cURL example:

```
￼curl -u 'user@example.com:password' -X PUT -H 'Content-Type: application/json' -T Change.json https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

The Change.json file would look like the following example.  Please note, the email field
is removed.  The email field is not changeable. 

```json
{
  "firstname": "Stan",
  "lastname": "Lee",
  "password": "Spider-Man",
  "companyId": [
    "5588869fbde7a0d00338ce8f"
  ],
  "theme": "dark",
  "role": "admin",
  "domain": [
    "www.example.com"
  ],
  "access_control_list": {
    "readOnly": false,
    "test": true,
    "configure": true,
    "reports": true,
    "dashBoard": true
  }
}
```

### Delete User

To delete that user, send a DELETE method.

```
https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

cURL example:

```
curl  -u 'user@example.com:password' -X DELETE -H 'Content-Type: application/json' https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

Response body:

```
{
  "statusCode": 200,
  "message": "Successfully deleted the user"
}
```

## Domain site create, modify and delete
  
### First mile locations

The first mile location is the RevAPM PoP that has the lowest
latency to the content origin. To create a domain, it is necessary
to select the correct first mile location.  This is typically the
same city as the origin data center.  If the city of the origin data
center is not listed, select the next nearest city.  

To show all of the first mile locations, RevAPM provides the
following API call:

```
https://api.revsw.net/v1/locations/firstmile
```

cURL example:

```
curl  -u 'user@example.com:password' https://api.revsw.net/v1/locations/firstmile
```


Response body:
```json
[
  {
    "locationName": "San Jose, CA",
    "id": "5588868cbde7a0d00338ce8e"
  },
  {
    "locationName": "New York, NY",
    "id": "55a56fa6476c10c329a90741"
  }
]
```

### Create a domain  
  
To create a domain, use the following POST to the api.revsw.net endpoint.

```
  https://api.revsw.net/v1/domains/
```

cURL example:

```
curl  -u 'user@example.com:password' -X POST -H 'Content-Type: application/json'  -T Domain.json https://api.revsw.net/v1/domains
```

Using the response from the first mile request, select the nearest 
firstmile location to the origin. The example JSON (Domain.json) would be the following:
  
```json
{
  "name": "www.example.com",
  "origin_server": "origin.example.com",
  "companyId": "5588869fbde7a0d00338ce8f",
  "origin_server_location": "San Jose, CA",
  "origin_host_header": "www.example.com",
  "tolerance": "4000"
}
``` 

Body response:

```json
{
  "statusCode": 200,
  "message": "Successfully created the domain",
  "object_id": "55c0222fe9032a2d741b9f38"
}
```

### Show the domain

Take the object_id from body response of the domain create POST 
and use it to get the current configuration of the domain.

```
https://api.revsw.net/v1/domains/55c0222fe9032a2d741b9f38
```

cURL Example:
```
curl -u 'user@example.com:password' -H 'Content-Type: application/json' http://api.revsw.net/v1/domains/55c0222fe9032a2d741b9f38
```

Body response:
```json
{
  "companyId": "5588869fbde7a0d00338ce8f",
  "id": "55c0222fe9032a2d741b9f38",
  "name": "www.example.com",
  "origin_server": "origin.example.com",
  "sync_status": "Success",
  "tolerance": "4000",
  "updated_at": "2015-08-04T02:24:14.204Z",
  "created_at": "2015-08-04T02:23:43.759Z",
  "origin_server_location": "San Jose, CA",
  "origin_host_header": "www.example.com",
  "cname": "www.example.com.revdn.net"
}
```    

### Modify the domain

Use the following PUT to modify the domain. Again, using 
the object_id from the response header from when the 
domain was created.

```
https://api.revsw.net/v1/domains/55888c861ef09d211562a439
```

cURL example:
```
curl  -u 'user@example.com:password' -X PUT -H 'Content-Type: application/json'  " -T Domain.json https://api.revsw.net/v1/domains/55888c861ef09d211562a439
```

Domain.json example, changing the origin server to origin-new.example.com

```json
{
 "origin_server": "origin-new.example.com",
 "companyId": "5588869fbde7a0d00338ce8f",
 "origin_host_header": "www.example.com",
 "tolerance": "4000"
}
```
