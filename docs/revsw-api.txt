
# RevAPM API

The first version of the RevAPM API makes it easier for developers to have 
open access to the RevAPM platform.  We created it to allow the developer 
to extenct the Application into the RevAPM platform. 
objects.

Build something great!


All requests are only accessible via https and the endpoint is located at
`api.revsw.net`. Depending on the request type a GET, POST, PUT or DELETE 
is used. We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer).
Every endpoint (URL) may support one of four different http verbs. GET
requests fetch information about an object, POST requests create objects,
PUT requests update objects, and finally DELETE requests will delete

## Authentication 

RevAPM's supports authentication using a user's email and password 
used to access. Rev system. Your API calls must include HTTP Basic 
Authentication header (RFC 2617) generated from a user's email and password. 
All modern browsers, as well as command line tools like curl and wget support 
basic authentication. This is secure, since all communication with the Rev 
service happens over SSL/HTTPS.

Example

```
curl -u 'user@example.com:password'
```


## Limits
Be nice. If you're sending too many requests too quickly, we'll send back a
`503` error code (server unavailable).
There is a limit of 5000 requests per hour. 


# Examples

## Account Control Example

### Create User
This following section we are going to show some examples of how to create, 
modify and check status of a user.  

  
Create User Request URL:

```
https://api.revsw.net/v1/users
```

Create user JSON (User.json):
```json
{
  "email": "stan.lee@example.com",
  "firstname": "Stan",
  "lastname": "Lee",
  "password": "Spider-Man",
  "companyId": [
    "5588869fbde7a0d00338ce8f"
  ],
  "theme": "light",
  "role": "admin",
  "domain": [
    "www.example.com",
    "api.example.com"
  ],
  "access_control_list": {
  "readOnly": false,
  "test": true,
  "configure": true,
  "reports": true,
  "dashBoard": true
  }
}
 
```
  
cURL example:
```
curl -u 'user@example.com:password' -X POST -H 'Content-Type: application/json' -T User.json http://api.revsw.net/v1/users
```

Response body:

```json
 {
   "statusCode": 200,
   "message": "Successfully created new user",
   "object_id": "55bff4b8c01a42a2348170f7"
 }
```

This means that the user was created.   

### Get User Profile

To get the profile of a user, use the object_id and use the same endpoint with a 
GET request.


```
https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

cURL example:

```
curl -u 'user@example.com:password' -H 'Content-Type: application/json' http://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```
Response body to the get User request

```json
{
    "email": "stan.lee@example.com",
    "firstname": "Stan",
    "lastname": "Lee",
    "companyId": [
      "5588869fbde7a0d00338ce8f"
    ],
    "domain": [
     "www.example.com",
     "api.example.com"
    ],
    "updated_at": "2015-08-03T23:05:52.000Z",
    "created_at": "2015-08-03T23:05:52.000Z",
    "theme": "light",
    "role": "admin",
    "access_control_list": {
    "readOnly": false,
    "test": true,
    "configure": true,
    "reports": true,
    "dashBoard": true
  },
  "user_id": "55bff4b8c01a42a2348170f7"
}
```
### Change User

To change a user, a PUT command is used to the same endpoint. In the following example,
we will be removing access to the "api.example.com" domain and changing the Portal 
theme to "dark".

```
https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```



cURL example:

```
ï¿¼curl -u 'user@example.com:password' -X PUT -H 'Content-Type: application/json' -T Change.json https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

The Change.json file would look like the following example.  Please note, the email field
is removed.  This field is not changeable. 

```json
{
  "firstname": "Stan",
  "lastname": "Lee",
  "password": "Spider-Man",
  "companyId": [
    "5588869fbde7a0d00338ce8f"
  ],
  "theme": "dark",
  "role": "admin",
  "domain": [
    "www.example.com"
  ],
  "access_control_list": {
    "readOnly": false,
    "test": true,
    "configure": true,
    "reports": true,
    "dashBoard": true
  }
}
```

### Delete User

To delete that user, send a DELETE. 


```
https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

cURL example:

```
curl  -u 'user@example.com:password' -X PUT -H 'Content-Type: application/json' https://api.revsw.net/v1/users/55bff4b8c01a42a2348170f7
```

Responss body:

```
{
  "statusCode": 200,
  "message": "Successfully deleted the user"
}
```

## Domain site create, modify and delete
  
### Create a domain  
  
To create a domain, use the following POST to the api.revsw.net endpoint.


```
  https://api.revsw.net/v1/domains/55888c861ef09d211562a439
```

cURL example:

```
curl  -u 'user@example.com:password' -X POST -H 'Content-Type: application/json'  " -T Domain.json https://api.revsw.net/v1/domains/55888c861ef09d211562a439
```

The example JSON (Domain.json) would be the following:
  
```json
{
  "name": "www.example.com",
  "origin_server": "origin.example.com",
  "companyId": "5588869fbde7a0d00338ce8f",
  "origin_server_location": "San Jose, CA",
  "origin_host_header": "www.example.com",
  "tolerance": "4000"
}
``` 

Body response:

```json
{
  "statusCode": 200,
  "message": "Successfully created the domain",
  "object_id": "55c0222fe9032a2d741b9f38"
}

### Show the domain

Take the object_id from body response of the domain create POST and use to 
get the content of the domain.



```
https://api.revsw.net/v1/domains/55c0222fe9032a2d741b9f38
```

cURL Example:
```
curl -u 'user@example.com:password' -H 'Content-Type: application/json' http://api.revsw.net/v1/domains/55c0222fe9032a2d741b9f38
```

Body response:
```json
{
  "companyId": "5588869fbde7a0d00338ce8f",
  "id": "55c0222fe9032a2d741b9f38",
  "name": "www.example.com",
  "origin_server": "origin.example.com",
  "sync_status": "Success",
  "tolerance": "4000",
  "updated_at": "2015-08-04T02:24:14.204Z",
  "created_at": "2015-08-04T02:23:43.759Z",
  "origin_server_location": "San Jose, CA",
  "origin_host_header": "www.example.com",
  "cname": "www.example.com.revdn.net"
}
```    

### Modify the domain

Use the following PUT to modify the domain. Again, useing the object_id from 
the response header from when the domain was created.

```
https://api.revsw.net/v1/domains/55888c861ef09d211562a439
```

cURL example:
```
curl  -u 'user@example.com:password' -X PUT -H 'Content-Type: application/json'  " -T Domain.json https://api.revsw.net/v1/domains/55888c861ef09d211562a439
```

Domain.json example, changing the origin server to origin-new.example.com

```json
{
 "origin_server": "origin-new.example.com",
 "companyId": "5588869fbde7a0d00338ce8f",
 "origin_host_header": "www.example.com",
 "tolerance": "4000"
}
```
