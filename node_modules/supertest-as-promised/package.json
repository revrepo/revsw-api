{
  "name": "supertest-as-promised",
  "version": "2.0.2",
  "description": "Supercharge supertest with a promise interface",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/WhoopInc/supertest-as-promised.git"
  },
  "keywords": [
    "supertest",
    "superagent",
    "request",
    "tdd",
    "bdd",
    "http",
    "test",
    "testing",
    "promise",
    "promised"
  ],
  "author": {
    "name": "Nikhil Benesch",
    "email": "benesch@whoop.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/WhoopInc/supertest-as-promised/issues"
  },
  "homepage": "https://github.com/WhoopInc/supertest-as-promised",
  "peerDependencies": {
    "supertest": "*"
  },
  "devDependencies": {
    "chai": "^2.2.0",
    "chai-as-promised": "^4.3.0",
    "rewire": "^2.3.1",
    "supertest": "*",
    "when": "3.7.2",
    "body-parser": "~1.12.3",
    "express": "3.20.2",
    "mocha": "2.2.4",
    "should": "6.0.1"
  },
  "dependencies": {
    "bluebird": "^2.9.24",
    "methods": "^1.1.1"
  },
  "readme": "<a href=\"http://promisesaplus.com/\">\n  <img src=\"https://promises-aplus.github.io/promises-spec/assets/logo-small.png\"\n    align=\"right\" valign=\"top\" alt=\"Promises/A+ logo\">\n</a>\n\n# supertest-as-promised\n\n<a href=\"https://travis-ci.org/WhoopInc/supertest-as-promised\">\n  <img src=\"https://travis-ci.org/WhoopInc/supertest-as-promised.svg?branch=master\"\n    align=\"right\" valign=\"top\" alt=\"Build Status\">\n</a>\n\nSuperTest as Promised supercharges [SuperTest] with a `then` method.\n\nInstead of layering callbacks on callbacks in your tests:\n\n```js\nrequest(app)\n  .get(\"/user\")\n  .expect(200, function (err, res) {\n    if (err) return done(err);\n\n    var userId = res.body.id;\n    request(app)\n      .post(\"/kittens\")\n      .send({ userId: userId, ... })\n      .expect(201, function (err, res) {\n        if (err) return done(err);\n\n        // ...\n      });\n  });\n```\n\nchain your requests like you were promised:\n\n```js\nreturn request(app)\n  .get(\"/user\")\n  .expect(200)\n  .then(function (res) {\n    return request(app)\n      .post(\"/kittens\")\n      .send({ userId: res})\n      .expect(201);\n  })\n  .then(function (res) {\n    // ...\n  });\n```\n\n## Usage\n\nSuperTest as Promised operates just like normal [SuperTest], except that the\nobject returned by `.get`, `.post`, etc. is a proper\nthenable:\n\n```js\nvar express = require(\"express\")\n  , request = require(\"supertest-as-promised\");\n\nvar app = express();\n\nrequest(app)\n  .get(\"/kittens\")\n  .expect(200)\n  .then(function (res) {\n    // ...\n  });\n```\n\nIf you use a promise-friendly test runner, you can just\nreturn your `request` chain from the test case rather than messing with a\ncallback:\n\n```js\ndescribe(\"GET /kittens\", function () {\n  it(\"should work\", function () {\n    return request(app).get(\"/kittens\").expect(200);\n  });\n});\n```\n\n### Agents\n\nIf you use a SuperTest agent to persist cookies, those are thenable too:\n\n```js\nvar agent = require(\"supertest-as-promised\").agent(app);\n\nagent\n  .get(\"/ugly-kitteh\")\n  .expect(404)\n  .then(function () {\n    // ...\n  })\n```\n\n\n### Promisey goodness\n\nTo start, only the `then` method is exposed. But once you've called `.then`\nonce, you've got a proper [Bluebird] promise that supports the whole gamut of\npromisey goodness:\n\n```js\nrequest(app)\n  .get(\"/kittens\")\n  .expect(201)\n  .then(function (res) { /* ... */ })\n  // I'm a real promise now!\n  .catch(function (err) { /* ... */ })\n```\n\nSee the [Bluebird API][bluebird-api] for everything that's available.\n\nYou may find it cleaner to cast directly to a promise using the `toPromise`\nmethod:\n\n```js\nrequest(app)\n  .get(\"/kittens\")\n  .expect(201)\n  .toPromise()\n  // I'm a real promise now!\n  .delay(function (res) { /* ... */ })\n  .then(function (res) { /* ... */ })\n```\n\n### BYOP: Bring your own `Promise`\n\nYou can supply own promise library so that the promises returned have your\nconvenience methods of choice.\n\nSimply call the SuperTest as Promised module with a ES6-compliant `Promise`\nconstructor, and you'll get back a new module configured to return your custom\npromises. To swap in [when.js], for example:\n\n```js\nvar when = require(\"when\")\n  , request;\n\nrequest = require(\"supertest-as-promised\")(when.Promise);\nrequest(app)\n  .get(\"/when.js\")\n  .then(function (res) { /* ... */ })\n  // I'm a when.js promise! (instanceof when.Promise == true)\n  .frobulate()\n\nrequest = require(\"supertest-as-promised\");\nrequest(app)\n  .get(\"/bluebird.js\")\n  .then(function (res) { /* .. */ })\n  // I'm back to the default Bluebird promise!\n```\n\n\n## Installation\n\n### Node\n\n```bash\n$ npm install supertest-as-promised\n```\n\nSuperTest as Promised lists [`supertest`][SuperTest] as a\n[peer dependency][peer-dependency], so it'll wrap whatever version of SuperTest\nyou've asked for in your own `package.json`. If you don't specify a version of\nSuperTest, npm will use the latest.\n\nDo note that SuperTest as Promised is a well-behaved citizen and doesn't\nmonkey-patch SuperTest directly:\n\n```js\n// I return thenables!\nvar request = require(\"supertest-as-promised\");\n\n// I'm lame and force you to use callbacks\nvar request = require(\"supertest\");\n```\n\n\n## Versions\n\nWe follow [semver]: the major version number will be upgraded with any breaking\nchange. Breaking changes in each major version are listed below. Consult the\n[changelog] for a list of meaningful new features in each version; consult the\ncommit log for a complete list.\n\n### Breaking changes in 2.0\n\n* [Bluebird][bluebird] has been upgraded to version 2.9.24.\n\n[bluebird]: https://github.com/petkaantonov/bluebird\n[bluebird-api]: https://github.com/petkaantonov/bluebird/blob/master/API.md#promiseisdynamic-value---boolean\n[changelog]: CHANGELOG.md\n[peer-dependency]: http://blog.nodejs.org/2013/02/07/peer-dependencies/\n[semver]: http://semver.org\n[SuperTest]: https://github.com/visionmedia/supertest\n[when.js]: https://github.com/cujojs/when\n",
  "readmeFilename": "README.md",
  "_id": "supertest-as-promised@2.0.2",
  "_from": "supertest-as-promised@*"
}
