/*************************************************************************
 *
 * REV SOFTWARE CONFIDENTIAL
 *
 * [2013] - [2015] Rev Software, Inc.
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Rev Software, Inc. and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Rev Software, Inc.
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Rev Software, Inc.
 */
/*jslint node: true */

"use strict";

var _       = require('lodash');
var Winston = require('winston');
var MongoDB = require('winston-mongodb').MongoDB;
var Schema  = require('./schema');
var Joi     = require('joi');

/**
 *
 * @constructor
 */
function AuditLogger() {}

/**
 *
 * @param object
 * @returns {boolean}
 */
AuditLogger.init = function (object) {
  var mongodbRequiredKeys = ['db', 'collection'];
  var fileRequiredKeys    = ['filename', 'timestamp'];

  if (
    !_.has(object, 'mongodb') ||
    !_.has(object, 'file') ||
    !_.every(mongodbRequiredKeys, _.partial(_.has, object.mongodb)) ||
    !_.every(fileRequiredKeys,    _.partial(_.has, object.file))
  ) {
    console.log('Incorrect configuration. Please see README.md');
    return false;
  }

  AuditLogger._addTransport(object);
}

/**
 *
 * @param object
 * @private
 */
AuditLogger._addTransport = function (object) {
  Winston.add(MongoDB, {
    db         : object.mongodb.db,
    collection : object.mongodb.collection
  });

  Winston.add(Winston.transports.File, {
    timestamp : object.file.timestamp,
    filename  : object.file.filename,
  });
}

/**
 *
 * @param object
 */
AuditLogger.store = function (object) {
  object = object || false;
  Joi.assert(object, Schema.options);
  Winston.info(object);
}

module.exports = AuditLogger;
