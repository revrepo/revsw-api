// Load modules

var Boom = require('boom');
var Hoek = require('hoek');

// Declare internals

var internals = {};


exports.register = function (server, options, next) {
  server.auth.scheme('apikey', internals.implementation);
  next();
};

exports.register.attributes = {
    pkg: require('../package.json')
};

internals.implementation = function (server, options) {
  Hoek.assert(options, 'Missing API key auth strategy options');
  var scheme = {
    authenticate: function (request, reply) {
      var req = request.raw.req;
      var authorization = req.headers.authorization;
      if (!authorization) {
        return reply(Boom.unauthorized(null, 'X-API-KEY'));
      }
      var parts = authorization.split(/\s+/);
      if (parts.length !== 2) {
        return reply(Boom.badRequest('Bad HTTP authentication header format', 'X-API-KEY'));
      }
      if (parts[0].toUpperCase() !== 'X-API-KEY') {
        return reply(Boom.unauthorized(null, 'X-API-KEY'));
      }
      if(parts[1].split('.').length !== 3) {
        return reply(Boom.badRequest('Bad HTTP authentication header format', 'X-API-KEY'));
      }
      var key = parts[1];
      options.validateFunc(request, key, function (err, isValid, credentials) {
        credentials = credentials || null;
        if (err) {
          return reply(err, null, {credentials: credentials});
        }
        if (!isValid) {
          return reply(Boom.unauthorized('Invalid API key', 'X-API-KEY'), null, {credentials: credentials});
        }
        if (!credentials) {
          return reply(Boom.badImplementation('Bad credentials object received for API key auth validation'), null, {log: {tags: 'credentials'}});
        }
        // Authenticated
        return reply.continue({credentials: credentials});
      });
    }
  };
  return scheme;
};
